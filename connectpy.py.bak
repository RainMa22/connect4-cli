import argparse
from abc import ABC, abstractmethod
from math import inf


class ColumnFullError(Exception):
    pass


class IllegalMoveError(Exception):
    pass


class Move:
    number = None

    def __init__(self, num, board=None):
        self.number = num
        self.board = board
        self.side = None
        if board is not None:
            self.side = board.Side

    def __copy__(self):
        copy = Move(self.number)
        return copy

    def setBoard(self, board):
        self.board = board
        side = board.Side

    def isWinningMove(self, board=None):
        if board is None: board = self.board.copy()
        self.setBoard(board)
        board.checkResult()
        if self.side:
            return board.Result == 'Red Won!'
        else:
            return board.Result == 'Blue Won!'

    def isLegal(self, legal_moves: str = None):
        if legal_moves is None and board is not None:
            legal_moves = self.board.update_legal_moves()
        legal_move = str(self.number) in [char for char in legal_moves]
        return legal_move


class BaseBoard(ABC):
    Board: list
    Side: bool
    Legal_Moves: str
    Result: str
    First: bool
    LatestMove: str
    Engine: any

    @abstractmethod
    def __init__(self):
        pass

    @abstractmethod
    def __str__(self):
        pass

    @abstractmethod
    def restart(self):
        pass

    @abstractmethod
    def side(self):
        pass

    @abstractmethod
    def update_legal_moves(self, board=None):
        pass

    @abstractmethod
    def checkResult(self):
        pass

    @abstractmethod
    def place(self, num: int):
        pass

    @abstractmethod
    def setup(self, string: str):
        pass

    @abstractmethod
    def export(self):
        pass

    @abstractmethod
    def debug(self):
        pass

    @abstractmethod
    def __copy__(self):
        pass

    @abstractmethod
    def undo(self):
        pass

    def copy(self):
        return self.__copy__()


class InternalEngine:
    Values = [1, 3, 2, 4, 2, 3, 1]
    MoveTree = {}

    def minimax(self, board: BaseBoard, maximize: bool, ply: int, alpha=-inf, beta=inf):
        if ply == 0:
            eval = self.evaluate(board)
            return eval
        if maximize:
            maxEval = -inf
            board.Legal_Moves = board.update_legal_moves()
            for legal in board.Legal_Moves:
                child = board.copy()
                child.place(int(legal))
                eval = self.minimax(child, False, ply - 1, alpha, beta)
                maxEval = max(maxEval, eval)
                alpha = max(alpha, eval)
                if beta <= alpha:
                    break
            return maxEval
        else:
            minEval = inf
            board.Legal_Moves = board.update_legal_moves()
            for legal in board.Legal_Moves:
                child = board.copy()
                child.place(int(legal))
                eval = self.minimax(child, True, ply - 1, alpha, beta)
                minEval = min(minEval, eval)
                beta = min(beta, eval)
                if beta <= alpha:
                    break
            return minEval

    def evaluate(self, node: BaseBoard):
        board = node.copy()
        latest_move = Move(board.LatestMove[-1], node)
        board.checkResult()
        value = 0
        if board.Result is not None:
            return inf if latest_move.isWinningMove() else -inf
        else:
            for i, row in enumerate(board.Board):
                for j, column in enumerate(row):
                    if column == '.': continue
                    value += self.Values[j] if column == 'x' else -self.Values[j]
        return value

    def play(self, board: BaseBoard, maximize: bool, ply=6):
        bo = board.copy()
        bo.Legal_Moves = bo.update_legal_moves()
        bestMove = None
        maximize = not maximize
        alpha = -inf
        beta = inf
        if bo.Legal_Moves == '': return None
        if maximize:
            maxEval = -inf
            for legal in bo.Legal_Moves:
                temp = bo.copy()
                temp.place(int(legal))
                val = self.minimax(temp, False, ply, alpha=alpha, beta=beta)
                # val = self.minimax(temp, False, ply)
                alpha = max(alpha, val)
                if val > maxEval or bestMove is None:
                    maxEval = val
                    bestMove = int(legal)
                if beta <= alpha: break
        else:
            minEval = inf
            for legal in bo.Legal_Moves:
                temp = bo.copy()
                temp.place(int(legal))
                val = self.minimax(temp, True, ply, alpha=alpha, beta=beta)
                # val = self.minimax(temp, True, ply)
                beta = min(beta, val)
                if val < minEval or bestMove is None:
                    minEval = val
                    bestMove = int(legal)
                if beta <= alpha: break
        return bestMove


class Board(BaseBoard):
    Board = []
    Side = True
    Legal_Moves = '1234567'
    Result = None
    on = False
    LatestMove = ''
    Engine = InternalEngine()

    def __init__(self):
        row = ['.', '.', '.', '.', '.', '.', '.']
        self.Board = [row.copy(), row.copy(), row.copy(),
                      row.copy(), row.copy(), row.copy()]

    def __str__(self):
        board = self.Board
        strings = []
        for column in board:
            strings.append(' '.join(column))
        return '\n'.join(strings)

    def __copy__(self):
        copy = Board()
        copy.setup(self.export())
        copy.LatestMove = self.LatestMove
        return copy

    def restart(self):
        self.__init__()
        self.Side = True

    def side(self):
        out = ('x' if self.Side else 'o')
        self.Side = not self.Side
        # print(self.Side)
        return out

    def update_legal_moves(self, board=None):
        if board is None:
            board = self.Board
        template = ''
        for i in range(7):
            if board[0][i] == '.':
                template += str(i + 1)
        return template

    def checkResult(self):
        if self.Result is not None:
            return
        board = self.Board
        max_x = 6
        max_y = 7
        endval = 0
        for i in range(6):
            for j in range(7):
                piece = board[i][j]
                if piece == '.': continue
                end1 = i - 3 >= 0
                end3 = j + 3 < max_y
                end2 = end1 and end3
                end4 = j - 3 >= 0 and end1
                for e in range(3):
                    if end1:
                        end1 = (board[i - e - 1][j] == piece)
                    if end2:
                        end2 = (board[i - e - 1][j + e + 1] == piece)
                    if end3:
                        end3 = (board[i][j + e + 1] == piece)
                    if end4:
                        end4 = (board[i - e - 1][j - e - 1] == piece)
                end = end1 or end2 or end3 or end4
                if end:
                    self.Result = 'Red Won!' if piece == 'x' else 'Blue Won!'

    def place(self, num: int):
        move = Move(num)
        if not move.isLegal(self.Legal_Moves):
            raise IllegalMoveError('Illegal Move!')
        num -= 1
        board = self.Board
        side = self.side()
        i = 0
        prev = None
        while i <= 5 and board[i][num] == '.':
            prev = i
            i += 1
        else:
            if prev is None:
                self.side()
                raise ColumnFullError('Column is Full!')
            else:
                board[prev][num] = side
        self.Board = board
        self.LatestMove += str(move.number)
        self.Legal_Moves = self.update_legal_moves()

    def setup(self, string: str):
        if string.endswith('0') or string.endswith('1'):
            self.Side = True if string.endswith('1') else False
            string = string[:-1]
        rows = string.split('/')
        for i, row in enumerate(rows):
            self.Board[i] = [char for char in row]

    def export(self):
        out = str(self)
        out = out.replace(' ', '')
        out = out.replace('\n', '/')
        out += f'{1 if self.Side else 0}'
        return out

    def play(self, ply=6):
        move = self.Engine.play(self, not self.Side, ply)
        if move is not None: self.place(move)
        return str(self)

    def undo(self):
        last = int(self.LatestMove[-1]) - 1
        i = 0
        while self.Board[i][last] == '.' and i < 5:
            i += 1
        else:
            self.Board[i][last] = '.'

    def debug(self):
        while self.Result is None:
            print(self.play())
            self.checkResult()


if __name__ == '__main__':
    arg = argparse.ArgumentParser()
    arg.add_argument('-t', '--text', help='receive text input and outputs text', type=bool, default=True)
    arg.add_argument('-f', '--first', help='human play first', type=bool, default=True)
    arg.add_argument('-p', '--ply', help='the depth of calculation', type=int, default=6)
    args = arg.parse_args()
    board = Board()
    ply = args.ply
    if not args.first: board.play(ply)
    while board.Result is None and args.text:
        cmd = input('connect4-cli >> ')
        cmd = cmd.split(' ')
        tip = '\n'.join(['To place a pieceï¼š place column #',
                         'To place restart a game: restart',
                         'To display the Board: d',
                         'To Toggle play against a computer: on',
                         'To set the depth of computer calculation: ply',
                         'To export a board string: export'
                         'To load a setup: setup [board string]',
                         'P.S board string is the board display, except that Enter is replaced with /'
                         ])
        if cmd[0] == 'place':
            try:
                board.place(int(cmd[1]))
                board.checkResult()
                if board.on:
                    board.play(ply)
                    print(board)
            except TypeError:
                print('please use numbers, and numbers only!')
            except ColumnFullError as cfe:
                print(str(cfe))
            except IllegalMoveError as ime:
                print(str(ime))
            except IndexError:
                print('please add a value after "place"')
        elif cmd[0] == 'd':
            print(str(board))
        elif cmd[0] == 'restart':
            board.restart()
            print('restart successful')
        elif cmd[0] == 'on':
            if board.on:
                print('you are no longer playing against a computer!')
            else:
                print('you are now playing against a computer!')
            board.on = not board.on
        elif cmd[0] == 'ply':
            try:
                ply = int(cmd[1])
            except IndexError:
                print('please add a value after "ply"')
        elif cmd[0] == 'setup':
            try:
                if len(cmd) > 1:
                    board.setup(cmd[1])
                else:
                    print('please add a value after "setup"')
            except Exception as e:
                print(str(e))
        elif cmd[0] == 'export':
            print(board.export())
        elif cmd[0] == 'play':
            try:
                if len(cmd) >= 2:
                    print(board.play(int(cmd[1])))
                else:
                    print(board.play(ply))
            except Exception as e:
                print(e)
        elif cmd[0] == 'debug':
            print(board.debug())
        else:
            print(tip)
    print(board.Result)
    print(board)
    input('[Press Enter to Exit program]')
